{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js","svg/logo.svg"],"names":["quizQuestions","question","answers","type","content","Question","props","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","Transition","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","questionTotal","answerOptions","map","Result","quizResult","App","state","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","src","logo","alt","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d96b48fb.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n      question: \"What is your favorite food?\",\n      answers: [\n          {\n              type: \"Odisha\",\n              content: \"Pakhala\"\n          },\n          {\n              type: \"Kerala\",\n              content: \"Dosa-Sambar\"\n          },\n          {\n              type: \"Punjab\",\n              content: \"Butter chicken\"\n          }\n      ]\n  },\n  {\n      question: \"Which traditional dress you like?\",\n      answers: [\n          {\n              type: \"Kerala\",\n              content: \"Mundum-Neriyathum\"\n          },\n          {\n              type: \"Odisha\",\n              content: \"Sambalpuri saree\"\n          },\n          {\n              type: \"Punjab\",\n              content: \"Punjabi suit\"\n          }\n      ]\n  },\n  {\n      question: \"Which traditional dance you like?\",\n      answers: [\n          {\n              type: \"Punjab\",\n              content: \"Bhangra\"\n          },\n          {\n              type: \"Odisha\",\n              content: \"Odissi\"\n          },\n          {\n              type: \"Kerala\",\n              content: \"Kathakali\"\n          }\n      ]\n  },\n  {\n      question: \"Which language you like?\",\n      answers: [\n          {\n              type: \"Odisha\",\n              content: \"odia\"\n          },\n          {\n              type: \"Punjab\",\n              content: \"Punjabi\"\n          },\n          {\n              type: \"Kerala\",\n              content: \"Malayalam\"\n          }\n      ]\n  },\n  {\n      question: \"Which place you liked most\",\n      answers: [\n          {\n              type: \"Odisha\",\n              content: \"Konark Sun temple\"\n          },\n          {\n              type: \"Kerala\",\n              content: \"Padmanabhaswamy Temple\"\n          },\n          {\n              type: \"Punjab\",\n              content: \"The Golden Temple\"\n          }\n      ]\n  }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition} from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n    </Transition>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition} from 'react-transition-group';\nfunction Result(props) {\n  return (\n    <Transition\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    </Transition>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n// While there remain elements to shuffle...\nwhile (0 !== currentIndex) {\n  // Pick a remaining element...\n  randomIndex = Math.floor(Math.random() * currentIndex);\n  currentIndex -= 1;\n\n  // And swap it with the current element.\n  temporaryValue = array[currentIndex];\n  array[currentIndex] = array[randomIndex];\n  array[randomIndex] = temporaryValue;\n}\n\nreturn array;\n}\n\nhandleAnswerSelected(event) {\nthis.setUserAnswer(event.currentTarget.value);\n\nif (this.state.questionId < quizQuestions.length) {\n  setTimeout(() => this.setNextQuestion(), 300);\n} else {\n  setTimeout(() => this.setResults(this.getResults()), 300);\n}\n}\nsetUserAnswer(answer) {\n  this.setState((state, props) => ({\n    answersCount: {\n      ...state.answersCount,\n      [answer]: (state.answersCount[answer] || 0) + 1\n    },\n    answer: answer\n  }));\n}\n\nsetNextQuestion() {\n  const counter = this.state.counter + 1;\n  const questionId = this.state.questionId + 1;\n\n  this.setState({\n    counter: counter,\n    questionId: questionId,\n    question: quizQuestions[counter].question,\n    answerOptions: quizQuestions[counter].answers,\n    answer: ''\n  });\n}\ngetResults() {\n  const answersCount = this.state.answersCount;\n  const answersCountKeys = Object.keys(answersCount);\n  const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n  const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n  return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n}\n\nsetResults(result) {\n  if (result.length === 1) {\n    this.setState({ result: result[0] });\n  } else {\n    this.setState({ result: 'Undetermined' });\n  }\n}\n\nrenderQuiz() {\n  return (\n    <Quiz\n      answer={this.state.answer}\n      answerOptions={this.state.answerOptions}\n      questionId={this.state.questionId}\n      question={this.state.question}\n      questionTotal={quizQuestions.length}\n      onAnswerSelected={this.handleAnswerSelected}\n    />\n  );\n}\n\nrenderResult() {\n  return <Result quizResult={this.state.result} />;\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>React Quiz</h2>\n      </div>\n      {this.state.result ? this.renderResult() : this.renderQuiz()}\n    </div>\n  );\n}\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.84287d09.svg\";"],"sourceRoot":""}